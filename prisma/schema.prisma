generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "referentialIntegrity", "typedSql"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model countries {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  tld_code     String    @db.VarChar(255)
  country_name String    @db.VarChar(255)
  icon         String?   @db.VarChar(255)
  users        users[]

  @@index([country_name], map: "countries_country_name_index")
}

model game_results {
  id                                       BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  created_at                               DateTime?         @db.Timestamp(0)
  updated_at                               DateTime?         @db.Timestamp(0)
  usa_player_id                            BigInt            @db.UnsignedBigInt
  ussr_player_id                           BigInt            @db.UnsignedBigInt
  game_type                                String            @db.VarChar(255)
  game_code                                String            @db.VarChar(255)
  reported_at                              DateTime          @db.Timestamp(0)
  game_winner                              String            @db.VarChar(255)
  end_turn                                 Int?              @db.UnsignedInt
  end_mode                                 String?           @db.VarChar(255)
  game_date                                DateTime          @db.Timestamp(0)
  video1                                   String?           @db.VarChar(255)
  video2                                   String?           @db.VarChar(255)
  video3                                   String?           @db.VarChar(255)
  reporter_id                              BigInt?           @db.UnsignedBigInt
  usa_previous_rating                      Int               @default(0)
  ussr_previous_rating                     Int               @default(0)
  users_game_results_reporter_idTousers    users?            @relation("game_results_reporter_idTousers", fields: [reporter_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_results_reporter_id_foreign")
  users_game_results_usa_player_idTousers  users             @relation("game_results_usa_player_idTousers", fields: [usa_player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_results_usa_player_id_foreign")
  users_game_results_ussr_player_idTousers users             @relation("game_results_ussr_player_idTousers", fields: [ussr_player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "game_results_ussr_player_id_foreign")
  ratings_history                          ratings_history[]

  @@index([end_mode], map: "game_results_end_mode_index")
  @@index([end_turn], map: "game_results_end_turn_index")
  @@index([game_date], map: "game_results_game_date_index")
  @@index([game_type], map: "game_results_game_type_index")
  @@index([reported_at], map: "game_results_reported_at_index")
  @@index([reporter_id], map: "game_results_reporter_id_foreign")
  @@index([usa_player_id], map: "game_results_usa_player_id_foreign")
  @@index([ussr_player_id], map: "game_results_ussr_player_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model ratings_history {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  player_id      BigInt       @db.UnsignedBigInt
  rating         Int          @default(0)
  game_code      String       @db.VarChar(255)
  game_result_id BigInt       @db.UnsignedBigInt
  total_games    Int          @default(0)
  friendly_games Int          @default(0)
  usa_victories  Int          @default(0)
  usa_losses     Int          @default(0)
  usa_ties       Int          @default(0)
  ussr_victories Int          @default(0)
  ussr_losses    Int          @default(0)
  ussr_ties      Int          @default(0)
  game_results   game_results @relation(fields: [game_result_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ratings_history_game_result_id_foreign")
  users          users        @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ratings_history_player_id_foreign")

  @@unique([player_id, game_result_id], map: "ratings_history_player_id_game_result_id_unique")
  @@index([game_result_id], map: "ratings_history_game_result_id_foreign")
  @@index([player_id, created_at], map: "ratings_history_player_id_created_at_index")
}

model users {
  id                                              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name                                            String?           @db.VarChar(255)
  email                                           String?           @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at                               DateTime?         @db.Timestamp(0)
  password                                        String?           @db.VarChar(255)
  remember_token                                  String?           @db.VarChar(100)
  created_at                                      DateTime?         @db.Timestamp(0)
  updated_at                                      DateTime?         @db.Timestamp(0)
  country_id                                      BigInt?           @db.UnsignedBigInt
  first_name                                      String?           @db.VarChar(255)
  last_name                                       String?           @db.VarChar(255)
  last_login_at                                   DateTime?         @db.Timestamp(0)
  regional_federation_id                          String?           @db.VarChar(8)
  city_id                                         BigInt?           @db.UnsignedBigInt
  phone_number                                    String?           @db.VarChar(20)
  preferred_gaming_platform                       String?           @db.VarChar(50)
  preferred_game_duration                         String?           @db.VarChar(50)
  timezone_id                                     String?           @db.VarChar(40)
  countries                                       countries?        @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_country_id_foreign")
  cities                                          cities?           @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_city_id_foreign")
  game_results_game_results_reporter_idTousers    game_results[]    @relation("game_results_reporter_idTousers")
  game_results_game_results_usa_player_idTousers  game_results[]    @relation("game_results_usa_player_idTousers")
  game_results_game_results_ussr_player_idTousers game_results[]    @relation("game_results_ussr_player_idTousers")
  ratings_history                                 ratings_history[]

  @@index([country_id], map: "users_country_id_foreign")
  @@index([first_name], map: "users_first_name_index")
  @@index([last_name], map: "users_last_name_index")
  @@index([city_id], map: "users_city_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model user_game_stats {
  player_id      BigInt    @id @db.UnsignedBigInt
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  rating         Int       @default(5000)
  total_games    Int       @default(0)
  friendly_games Int       @default(0)
  usa_victories  Int       @default(0)
  usa_losses     Int       @default(0)
  usa_ties       Int       @default(0)
  ussr_victories Int       @default(0)
  ussr_losses    Int       @default(0)
  ussr_ties      Int       @default(0)
}

model cities {
  id         BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  name       String  @db.VarChar(50)
  latitude   Float   @db.Float
  longitude  Float   @db.Float
  province   String? @db.VarChar(100)
  timeZoneId String? @db.VarChar(40)
  users      users[]
}

model regional_federations {
  code String @id @db.VarChar(8)
  name String @db.VarChar(50)
  icon String @db.VarChar(20)
}

model tournament_types {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)
  tournament_type_name  String    @db.VarChar(100)

  @@unique(name="unique_tournament_type_name", [tournament_type_name])
}

model tournaments {
  id                                        BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  tournament_type_id                        BigInt              @db.UnsignedBigInt
  created_at                                DateTime?           @db.Timestamp(0)
  updated_at                                DateTime?           @db.Timestamp(0)
  description                               Text?               @db.Text()
  start_date                                Date?               @db.Date(0)
  end_date                                  Date?               @db.Date(0)
  format                                    String?             @db.VarChar(100)
  registration_status                       String?             @db.VarChar(100)
  spreadsheet_link                          String?             @db.VarChar(255)
  edition                                   String?             @db.VarChar(100)
  game_duration                             String?             @db.VarChar(100)
  tournament_status                         String?             @db.VarChar(100)
  admins                                    Json

  tournaments_tournament_type_id_foreign    tournament_types?   @relation("tournaments_tournament_type_id_foreign", fields: [tournament_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tournaments_tournament_type_id_foreign")
  
  @@index([tournament_type_id], map: "tournaments_tournament_type_id_foreign")
  @@unique(name="unique_tournament_type_id_edition", [tournament_type_id, edition])
}

model tournament_schedule {
  id                                            BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  tournament_id                                 BigInt        @db.UnsignedBigInt
  created_at                                    DateTime?     @db.Timestamp(0)
  updated_at                                    DateTime?     @db.Timestamp(0)
  usa_player_id                                 BigInt        @db.UnsignedBigInt
  ussr_player_id                                BigInt        @db.UnsignedBigInt
  game_code                                     String        @db.VarChar(255)
  game_due_date                                 Date          @db.Date(0) 

  tournaments_schedule_tournament_id_foreign    tournaments?  @relation("tournaments_schedule_tournament_id_foreign", fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tournaments_schedule_tournament_id_foreign")
  tournament_schedule_usa_player_id_foreign     users?        @relation("tournament_schedule_usa_player_id_foreign", fields: [usa_player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tournament_schedule_usa_player_id_foreign")
  tournament_schedule_ussr_player_id_foreign    users?        @relation("tournament_schedule_ussr_player_id_foreign", fields: [ussr_player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tournament_schedule_ussr_player_id_foreign")

  @@index([tournament_id], map: "tournaments_schedule_tournament_id_foreign")
  @@index([usa_player_id], map: "tournament_schedule_usa_player_id_foreign")
  @@index([ussr_player_id], map: "tournament_schedule_ussr_player_id_foreign")
  @@unique(name="unique_tournament_id_game_code", [tournament_id, game_code])
}


model tournament_schedule {
  id                                              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  tournament_id                                   BigInt        @db.UnsignedBigInt
  created_at                                      DateTime?     @db.Timestamp(0)
  updated_at                                      DateTime?     @db.Timestamp(0)
	user_id bigint                                  BigInt        @db.UnsignedBigInt
	on_waitlist                                     boolean       @db.boolean

  tournament_registrations_tournament_id_foreign  tournaments?  @relation("tournament_registrations_tournament_id_foreign", fields: [tournament_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tournament_registrations_tournament_id_foreign")
  tournament_registrations_user_id_foreign        users?        @relation("tournament_registrations_user_id_foreign", fields: [usa_player_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tournament_registrations_user_id_foreign")

  @@index([tournament_id], map: "tournament_registrations_tournament_id_foreign")
  @@index([user_id], map: "tournament_registrations_user_id_foreign")
  @@unique(name="unique_tournament_id_user_id", [tournament_id, user_id])
}